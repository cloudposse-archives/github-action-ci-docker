---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name: GitHub Action CI Docker

# License of this project
license: "APACHE2"

# Copyrights
copyrights:
  - name: "Cloud Posse, LLC"
    url: "https://cloudposse.com"
    year: "2022"

# Canonical GitHub repo
github_repo: "cloudposse/github-action-ci-docker"

# Badges to display
badges:
  - name: "Private ECR"
    image: "https://github.com/cloudposse/github-action-ci-docker/workflows/ecr-private/badge.svg?branch=main"
    url: "https://github.com/cloudposse/github-action-ci-docker/actions?query=workflow%3Aecr-private"
  - name: "Public ECR"
    image: "https://github.com/cloudposse/github-action-ci-docker/workflows/ecr-public/badge.svg?branch=main"
    url: "https://github.com/cloudposse/github-action-ci-docker/actions?query=workflow%3Aecr-public"
  - name: "Latest Release"
    image: "https://img.shields.io/github/release/cloudposse/github-action-ci-docker.svg"
    url: "https://github.com/cloudposse/github-action-ci-docker/releases/latest"
  - name: "Slack Community"
    image: "https://slack.cloudposse.com/badge.svg"
    url: "https://slack.cloudposse.com"

related:
  - name: "GitHub Action Auto-release"
    description: "Automatically draft release notes for a new release when merges are made into the default branch"
    url: "https://github.com/cloudposse/github-action-auto-release"
  - name: "GitHub Action Terraform Auto-context"
    description: "Automatically update `context.tf` whenever a new version becomes available"
    url: "https://github.com/cloudposse/github-action-terraform-auto-context"
  - name: "GitHub Action CI Terraform"
    description: "Full suite of CI actions specifically built for Terraform, along with chatops support"
    url: "https://github.com/cloudposse/github-action-ci-terraform"
  - name: "GitHub Action Validate CODEOWNERS"
    description: "Validate and lint contents of CODEOWNERS file"
    url: "https://github.com/cloudposse/github-action-validate-codeowners"

# References
references:
  - name: "GitHub Action - Checkout"
    description: "Checks out a repository under $GITHUB_WORKSPACE, so a workflow can access it"
    url: "https://github.com/actions/checkout"
  - name: "Create Pull Request"
    description: "Take all unpushed commits and modifications to the code and put it on a new branch with a PR already made"
    url: "https://github.com/peter-evans/create-pull-request"

# Short description of this project
description: |-
  Github Action CI Docker will build, test, and deploy a container image using [Docker](https://www.docker.com/).
  The [`example`](https://github.com/cloudposse/github-action-ci-docker/.github/workflows/docker.yml/) showcases how
  to use private and public ECR repositories for storage. If desired, it will also trigger a deployment on another repository.

# How to use this project
usage: |-
  If you haven't already, follow the steps in the [quickstart](#quickstart) section.

# Example usage
examples: |-
  Here's a real world example:
  - [`github-action-ci-docker`](https://github.com/cloudposse/github-action-ci-docker/.github/workflows/docker.yml/) - Cloud Posse's self-testing Docker GitHub Action

# How to get started quickly
quickstart: |-
  Create a new workflow manifest at `.github/workflows/docker.yml`.

  The following will build a container image based on `./Dockerfile`, assume a role using OIDC, get credentials from the container registry, and then push
  once complete. Just make sure to replace the following with value specific to your setup: `AWS_REGION, AWS_IAM_ROLE_ARN, and ECR_REGISTRY`.

  ```yaml
  name: ecr-private

  on:
    issue_comment:
      types: [created]
    pull_request:
      types: [opened, synchronize, reopened]

  env:
    AWS_REGION: YOUR_AWS_REGION
    IAM_ROLE_ARN: YOUR_IAM_ROLE_ARN
    ECR_REGISTRY: YOUR_ECR_REGISTRY

  # these permissions are needed to interact with GitHub's OIDC Token endpoint
  permissions:
    id-token: write
    contents: read

  jobs:
    docker:
      # only run on pull requests so long as they don't come from forks
      if: ( (github.event_name == 'pull_request') && (github.event.pull_request.head.repo.full_name == github.repository) ) || (github.event_name != 'pull_request')
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v2

        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            role-to-assume: ${{ env.IAM_ROLE_ARN }}
            role-session-name: github-action-ci-docker-workflow
            aws-region: ${{ env.AWS_REGION }}

        - name: Login to Amazon ECR
          uses: aws-actions/amazon-ecr-login@v1

        - name: Build, Test, and Push to Private ECR Registry
          uses: cloudposse/github-action-ci-docker@main 
          with:
            docker-registry: ${{ env.ECR_REGISTRY }}
  ````

# Contributors to this project
contributors: []
