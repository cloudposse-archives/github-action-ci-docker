name: "Docker Continuous Integration"

description: |
  Build and test code, push to docker registry and send a deployment event

inputs:
  app-checkout-path:
    description: "The path to checkout the application repository to during the workflow run"
    default: ./app-repo
    required: false
  deploy:
    description: "A `true` value will trigger a GitHub deployment"
    required: false
    default: "false"
  docker-registry:
    description: "Registry where docker image is stored"
    required: true
  image-name:
    description: "If present will override derived docker image name"
    required: false
    default: ${{ github.event.repository.name }}
  org-access-token:
    description: |
      Secret token for accessing other repos in the GitHub Org. The `secrets` context
      is not available in composite actions and must be passed in from the calling action
    required: false
  run-tests:
    description: "A `true` value will result in running tests"
    default: "false"
    required: false
  secrets: # https://github.com/docker/build-push-action/blob/master/docs/advanced/secrets.md
    description: "List of secrets to expose to the build (eg. key=string, GIT_AUTH_TOKEN=mytoken)"
    required: false
  stages:
    description: "JSON formatted map of the environments and repos to deploy to based off GitHub event"
    required: true
  subdirectory:
    description: "Subdirectory of docker file"
    required: false
    default: "."
  tests-script:
    description: "Script to run during tests step, requires `run_tests` to be set to true, script needs to be executable"
    default: tests.sh
    required: false

runs:
  using: composite
  steps:
    #####################################
    # Environment and variable setup
    - name: Set composite level variables
      id: vars
      uses: actions/github-script@v5
      with:
        script: |
          const actionContext = require('./lib/actioncontext.js')(this, context, core, github, ${{ toJSON(github) }}, ${{ toJSON(inputs) }}, ${{ toJSON(steps) }})
          const deployment = require('./lib/deployment.js')(actionContext)

          actionContext.setOutput("image_build_enabled", deployment.getInfoCI().image_build_enabled)
          actionContext.setOutput("tests_enabled", "${{ github.event.action }}" != 'closed' && "${{ inputs.run-tests }}" == 'true')
          actionContext.setOutput("image_tag_sha", `${{ inputs.docker-registry }}/${{ inputs.image-name }}:${{ github.sha }}`)

    - name: Check out repository code
      if: github.event.action != 'closed'
      uses: actions/checkout@v2
      with:
        # Checking the repo out to a separate path seems to avoid a current known issue
        # https://github.com/actions/runner/issues/1300
        path: ${{ inputs.app-checkout-path }}

    # #####################################
    # Build Docker image
    # docker context must be created prior to setting up Docker Buildx
    # https://github.com/actions-runner-controller/actions-runner-controller/issues/893
    - name: Set up Docker Context for Buildx
      if: ${{ steps.vars.outputs.image_build_enabled == 'true' }}
      shell: bash
      run: |
        docker context rm buildx-context || true
        docker context create buildx-context

    - name: Set up Docker Buildx (required for docker/build-push-action@v2)
      if: steps.vars.outputs.image_build_enabled == 'true'
      uses: docker/setup-buildx-action@v1
      env:
        DOCKER_CONFIG: /home/runner/.docker
      with:
        endpoint: buildx-context

    - name: Build & Push image to SHA and PR branch
      if: steps.vars.outputs.image_build_enabled == 'true'
      uses: docker/build-push-action@v2
      with:
        context: ${{ inputs.app-checkout-path }}/${{ inputs.subdirectory }}
        pull: true
        push: true
        # NOTE: when github actions has issues, we have to comment out the cache-* lines
        cache-from: type=gha,scope=blockcluster
        cache-to: type=gha,mode=max,scope=blockcluster
        secrets: |
          ${{ inputs.secrets }}
        tags: |
          ${{ steps.vars.outputs.image_tag_sha }}

    - name: Run tests
      if: steps.vars.outputs.tests_enabled == 'true'
      env:
        IMAGE: ${{ steps.vars.outputs.image_tag_sha }}
      run: |
        ${{ inputs.app-checkout-path }}/${{ inputs.tests-script }}
      shell: bash

    - name: Create deployment
      uses: actions/github-script@v5
      if: inputs.deploy == 'true'
      with:
        debug: true
        github-token: ${{ inputs.org-access-token }}
        script: |
          const actionContext = require('./lib/actioncontext.js')(this, context, core, github, ${{ toJSON(github) }}, ${{ toJSON(inputs) }}, ${{ toJSON(steps) }})
          const deployment = require('./lib/deployment.js')(actionContext)

          let pr_suffix = deployment.getInfoCI().pr_suffix // referenced in inputs.stages
          deployment.newDeployment(JSON.parse(`${{ inputs.stages }}`))

branding:
  icon: "target"
  color: "gray-dark"
